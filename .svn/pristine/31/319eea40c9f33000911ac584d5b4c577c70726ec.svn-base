<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hanson.mapper.UsersMapper">
	<!-- 字段列表 -->
	<sql id="columns">
		id,
		login_name,
	  	password,
	  	name,
	  	email,
	  	locked,
	  	usertype,
	  	qyid,
	  	activecode,
	  	sex,
	  	birthday,
	  	address,
	  	remark,
	  	useravatar,
	  	validstr,
	  	phone
	</sql>

	<!-- 查询条件 -->
	<sql id="where">	
		<where>
			<if test="login_name != null">
	    		<![CDATA[ and login_name like CONCAT('%',#{login_name},'%') ]]>
	    	</if>
	    	<if test="name != null">
	    		<![CDATA[ and name like CONCAT('%',#{name},'%') ]]>
	    	</if>
	    	<if test="email != null">
	    		<![CDATA[ and email like CONCAT('%',#{email},'%') ]]>
	    	</if>
    	</where>
  	</sql>
  	
  	<!-- 排序条件 -->
  	<sql id="page_sort">
		<!--排序条件 -->
		<if test="ORDER_BY_MENU!=null">
			<choose>
				<when test="ORDER_BY_DESC!=null">
		 			<![CDATA[ order by ${ORDER_BY_MENU} ${ORDER_BY_DESC}]]>
				</when>
				<otherwise>
					<![CDATA[ order by ${ORDER_BY_MENU}]]>
				</otherwise>
			</choose>
		</if>
	</sql>
	
	<!-- 分页查询-统计总数 -->
  	<select id="countTotles" parameterType="java.util.Map" resultType="long">
	    select count(*)
		from users t
	    <include refid="where" />
	    <include refid="page_sort" />
  	</select>
  	
  	<!-- 分页查询 -->
  	<select id="search" parameterType="java.util.Map" resultType="java.util.HashMap">
	    select  <include refid="columns"/>, 
			(select name from roles where id = usertype) roleName 
		from users t
	    <include refid="where" />
	    <include refid="page_sort" />
	    limit #{BEGIN_ROW},#{PAGE_SIZE}
  	</select>
	



	



	<!-- 新增用户 -->
	<insert id="saveUsers" parameterType="com.hanson.model.Users">
		INSERT INTO users (
		  login_name,
		  password,
		  name,
		  email,
		  locked,
		  usertype,
		  qyid,
		  activecode,
		  sex,
		  birthday,
		  address,
		  remark,
		  useravatar,
		  validstr,
		  phone
		)  VALUES (
		  #{login_name}, 
		  #{password},
		  #{name},
		  #{email},
		  #{locked},
		  #{usertype},
		  #{qyid},
		  #{activecode},
		  #{sex},
		  #{birthday},
		  #{address},
		  #{remark},
		  #{useravatar},
		  #{validstr},
		  #{phone}
		);
	</insert>
	
	<!-- 删除用户 -->
	<delete id="deleteUsers" parameterType="com.hanson.model.Users">
		delete from users where id = #{id}
	</delete>
	
	<!-- 修改用户 -->
	<update id="updateUsers" parameterType="com.hanson.model.Users">
		update users t set 
			t.LOGIN_NAME = #{login_name}, 
			t.NAME = #{name}, 
			t.EMAIL = #{email}, 
			t.qyid = #{qyid}, 
			t.usertype = #{usertype}
			
		where t.ID = #{id}
	</update>
	
	<!-- 修改密码 -->
	<update id="updatePassword" parameterType="com.hanson.model.Users">
		update users t set 
			t.password = #{password}
		where t.ID = #{id}
	</update>
	
	<!-- 查询用户 -->
	<select id="findUsers" parameterType="com.hanson.model.Users" resultType="com.hanson.model.Users">
		select  <include refid="columns"/>, 
			(select name from roles where id = usertype) roleName 
		from users t
		<where>
		  1=1
		  <if test="id != null">
			AND id = #{id}  
		  </if>
		  <if test="login_name != null">
			<![CDATA[ and login_name like CONCAT('%',#{login_name},'%') ]]> 
		  </if>
		  <if test="name != null">
		    <![CDATA[ and name like CONCAT('%',#{name},'%') ]]> 
		  </if>
		  <if test="email != null">
		    <![CDATA[ and email like CONCAT('%',#{email},'%') ]]> 
		  </if>
		</where>
		order by id desc
	</select>
	
	<!-- 根据账户名和密码查询用户 -->
	<select id="findUsersLogin" parameterType="com.hanson.model.Users" resultType="com.hanson.model.Users">
		select  <include refid="columns"/>
		from users t
		<where>
		  1=1
		  <if test="login_name != null and login_name != ''">
		  	and login_name = #{login_name}
		  </if>
		  <if test="password != null and password != ''">
		  	and password = #{password}
		  </if>
		</where>
	</select>
</mapper>
